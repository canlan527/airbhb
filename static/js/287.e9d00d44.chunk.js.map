{"version":3,"file":"static/js/287.e9d00d44.chunk.js","mappings":"+JAEaA,E,QAAmBC,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iI,UCmC1C,GAjCkBC,EAAAA,EAAAA,OAAK,SAACC,GACtB,IAAOC,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,SACXC,GAAeC,EAAAA,EAAAA,QAAO,MAmB5B,OAlBAC,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAaH,EAAaI,QAAQN,SAASC,GAC3CM,EAAYF,EAAWG,YACvBC,EAAiBJ,EAAWK,WAC5BC,EAAiBT,EAAaI,QAAQE,YAGxCI,EAAWH,EAA6B,GAAZF,EAAmC,GAAjBI,EAE5CE,EAJcX,EAAaI,QAAQQ,YAILH,EACjCC,EAAW,IAAGA,EAAW,GACzBA,GAAYC,IAAeD,EAAWC,GAEzCX,EAAaI,QAAQS,MAAMC,UAAS,cAAAC,QAAkBL,EAAQ,MAChE,GAAG,CAACX,KAIFiB,EAAAA,EAAAA,KAACxB,EAAgB,CAACyB,IAAKjB,EAAaF,SACjCA,GAGP,G,kHC5BaoB,E,QAAuBzB,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wT,UCuC9C,GArCsBC,EAAAA,EAAAA,OAAK,WACzB,IAAMuB,EAAO,CACX,kBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBAEFC,GAAgCC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCrB,EAAQuB,EAAA,GAAEE,EAAWF,EAAA,GAC5B,SAASG,EAAYC,GACnB,IAAIC,EAAyB,SAAdD,EAAuB3B,EAAW,EAAIA,EAAW,EAE7D4B,EAAW,IAAGA,EAAWR,EAAKS,OAAS,GACvCD,EAAWR,EAAKS,OAAS,IAAGD,EAAW,GAC3CH,EAAYG,EACb,CAEA,OACEE,EAAAA,EAAAA,MAACX,EAAoB,CAAApB,SAAA,EACnB+B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOhC,SAAA,EACpBkB,EAAAA,EAAAA,KAAA,UAAQe,QAAS,kBAAMN,EAAY,OAAO,EAAC3B,SAAC,SAAa,OAAGkB,EAAAA,EAAAA,KAAA,UAAQe,QAAS,kBAAMN,EAAY,OAAO,EAAC3B,SAAC,aAE1GkB,EAAAA,EAAAA,KAAA,OAAKc,UAAU,iBAAgBhC,UAC7BkB,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAACjC,SAAUA,EAASD,SAC3BqB,EAAKc,KAAI,SAACC,EAAMC,GAAK,OACpBnB,EAAAA,EAAAA,KAAA,QAAkBc,UAAU,iBAAgBhC,SACzCoC,GADQC,EAEJ,UAMnB,G","sources":["base-ui/indicator/style.js","base-ui/indicator/index.jsx","views/demo/demo-indicator/style.js","views/demo/demo-indicator/index.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const IndicatorWrapper = styled.div`\n    position: relative;\n    display: flex;\n    transition: all 300ms ease;\n    > * {\n      flex-shrink: 0\n    };\n`;","import PropTypes from 'prop-types'\nimport React, { memo, useEffect, useRef } from 'react'\nimport { IndicatorWrapper } from './style'\n\nconst Indicator = memo((props) => {\n  const {children, curIndex} = props\n  const IndiactorRef = useRef(null)\n  useEffect(() => {\n    // console.log(curIndex, 'useEffect');\n    const selectItem = IndiactorRef.current.children[curIndex]; // 当前选中的item dom\n    const itemWidth = selectItem.clientWidth;\n    const itemOffsetLeft = selectItem.offsetLeft;\n    const indicatorWidth = IndiactorRef.current.clientWidth;\n    const scrollWidth = IndiactorRef.current.scrollWidth;\n    // 计算滚动的距离\n    let distance = itemOffsetLeft + itemWidth * 0.5 - indicatorWidth * 0.5;\n    // 一共能滚动的距离\n    const totalDistance = scrollWidth - indicatorWidth;\n    if(distance < 0) distance = 0;\n    if(distance >= totalDistance) distance = totalDistance\n    // console.log(curIndex, distance, totalDistance);\n    IndiactorRef.current.style.transform = `translateX(${-distance}px)`\n  }, [curIndex])\n\n\n  return (\n    <IndicatorWrapper ref={IndiactorRef}>\n      {children}\n    </IndicatorWrapper>\n  )\n})\n\nIndicator.propTypes = {\n  children: PropTypes.array,\n  curIndex: PropTypes.number,\n}\n\nexport default Indicator","import styled from \"styled-components\";\n\nexport const DemoIndicatorWrapper = styled.div`\n  padding: 20px;\n\n  .tools {\n    padding: 12px;\n    margin: 20px;\n  }\n  .indicator-list {\n    width: 400px;\n    background: tan;\n    overflow: hidden;\n    .indicator-item {\n      padding: 4px 8px;\n      border: 1px solid #222;\n      margin-right: 8px;\n      cursor: pointer;\n    }\n  }\n`;\n","import React, { memo, useState } from \"react\";\nimport Indicator from \"@/base-ui/indicator\";\nimport { DemoIndicatorWrapper } from \"./style\";\n\nconst DemoIndicator = memo(() => {\n  const list = [\n    \"测试111\",\n    \"测试2222\",\n    \"测试333\",\n    \"测试4444\",\n    \"测试5555\",\n    \"测试6666\",\n    \"测试777\",\n  ];\n  const [curIndex, setCurIndex] = useState(0)\n  function handleClick(direction) {\n    let newIndex = direction === 'next' ? curIndex + 1 : curIndex - 1;\n    // 判断边界情况\n    if(newIndex < 0) newIndex = list.length - 1;\n    if(newIndex > list.length - 1) newIndex = 0;\n   setCurIndex(newIndex) \n  }\n\n  return (\n    <DemoIndicatorWrapper>\n      <div className=\"tools\">\n        <button onClick={() => handleClick('prev')}>prev</button> | <button onClick={() => handleClick('next')}>next</button>\n      </div>\n      <div className=\"indicator-list\">\n        <Indicator curIndex={curIndex}>\n          {list.map((item, index) => (\n            <span key={index} className=\"indicator-item\">\n              {item}\n            </span>\n          ))}\n        </Indicator>\n      </div>\n    </DemoIndicatorWrapper>\n  );\n});\n\nexport default DemoIndicator;\n"],"names":["IndicatorWrapper","styled","_templateObject","_taggedTemplateLiteral","memo","props","children","curIndex","IndiactorRef","useRef","useEffect","selectItem","current","itemWidth","clientWidth","itemOffsetLeft","offsetLeft","indicatorWidth","distance","totalDistance","scrollWidth","style","transform","concat","_jsx","ref","DemoIndicatorWrapper","list","_useState","useState","_useState2","_slicedToArray","setCurIndex","handleClick","direction","newIndex","length","_jsxs","className","onClick","Indicator","map","item","index"],"sourceRoot":""}